# notes.txt
################################################################################

# Ideas, issues, improvements, and potential features:
- man pages
- -h for brief-help (including a supposition to use --help)
... , --help for longer help
... -h will use POSSIBLE_PARAMS=()
... --help => _help_verbose()
... --help => _help_brief()
- completion
- install with make/config/w.e.
- Printing the proper command-invoke, with ssh-params: 
while ; ; ; <(ssh -g)
(non-ssh-config-contingent)
- if user doesnt have a key ON github
- useradd to create a user with the requested UN, if none currently exists

# Advanced key-user association-mgmt
- If -k is supplied, prompt to ask for a NAME for the key, storing it 
.... in the $HOME/.bless directory
- Being able to auth by ssh-points: 
(so that different servers can "talk to one another", directly)
... can ssh into e.g. mango, and arturo, and you want to bless mango for arturo
    # Could use MasterController to pipe all these commands to the ssh-point
    - check if they have a key
    - if not, generate it
    - then pipe it in
- add a comment next to the key, on-server
- cache the keys in a "keyring"
# ALT: use gpg's fxnality of the keyring

################################################################################
# ROBUSTNESS & USABILITY TESTS:
# TODO
# - $2 -- unbound variable ... if a pairing-flag is at the script end, 
# ... it will fail to set.
# - SOLUTION: ${2?Must provide THING}

# - is $PUBKEYSTRING already set? well, error because the program-user
# ... may be confused as to how to invoke.

# - is the system up? (ping)
# - can you yourself ssh in to the system? (-q ... bash -c 'exit')
# - do you have access to make users on the HOST?

# - does the user already exist on the system?
# - ... would you like to then make the user?
# - warning for giving ROOT access
# - after catting the string, check that the pubkey is there
# - ... could check your own admin-key, 
# - ... then use that same script/procedure once you know it works.

# - Generating a SSH_TEST_CMD=( invoke ) to print & share with the user
# ----> could generate special parameters implicit in ssh's config file
# ... by collating parameters from ssh -G's printout

# ETC.
# Turn the help-msg // args into an array
#   - debug mode uses it
#   - help msg generation uses it
#   - arg-processing uses it


# bless_me counterpart:
# DESC: basically, just finds, or generates, a valid .pubkey
# - is my github key valid? (ssh-test)
# - NO: use my id_rsa, or gen, and cat it onto github, and print it to screen
# - Do I have an id_rsa? No? Generate it.

# FEATURES:
# -m == me
# -l --list == list the users you've ( successfully ) auth'd so far
# ... automatically added to a dotfile in your home-dir
# completion: get arg-specific completion, for things like -r
# ... define completion-helper-functions
# ... investigate how ssh & such does it
# ... e.g.
# ... -f <FILE>
# ... -g <NAMES-IN-DOTFILE>
# - Generate an sshc-frag
# - Generate an ssh-test invoke, split by --options
# -o == opts to pass-off to SSH for blessing

